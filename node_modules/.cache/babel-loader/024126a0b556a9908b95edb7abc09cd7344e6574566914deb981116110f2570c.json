{"ast":null,"code":"\n\n// import React, { useEffect, useState } from 'react';\n// import { useParams, Link } from 'react-router-dom';\n// import { getProject, listIssues } from '../../services/mockApi';\n\n// export default function ProjectView() {\n//   const { id } = useParams();\n//   const [project, setProject] = useState(null);\n//   const [issues, setIssues] = useState([]);\n\n//   useEffect(() => {\n//     if (id) {\n//       getProject(id).then(setProject);\n//       // Fetch only issues belonging to this project\n//       listIssues(id).then(setIssues);\n//     }\n//   }, [id]);\n\n//   if (!project)\n//     return (\n//       <div className=\"card\">\n//         <p>Project not found</p>\n//       </div>\n//     );\n\n//   return (\n//     <div className=\"card\" role=\"region\" aria-labelledby=\"proj-title\">\n//       <h2 id=\"proj-title\">\n//         {project.name} <span className=\"small\">({project.key})</span>\n//       </h2>\n//       <p>{project.description}</p>\n//       <div style={{ display: 'flex', gap: 8 }}>\n//         {/* Each project has its own board */}\n//         <Link to={`/kanban/${project.id}`} className=\"btn\">\n//           Open {project.name} Board\n//         </Link>\n//       </div>\n//       <hr />\n//       <h3>Issues</h3>\n//       <ul>\n//         {issues.length > 0 ? (\n//           issues.map((i) => (\n//             <li key={i.id}>\n//               <Link to={'/issues/' + i.id}>{i.title}</Link> — <em>{i.status}</em>\n//             </li>\n//           ))\n//         ) : (\n//           <li>No issues for this project yet.</li>\n//         )}\n//       </ul>\n//     </div>\n//   );\n// }\n\n////////////////////////////////  for responsivenesss //////////////////////////////","map":{"version":3,"names":[],"sources":["C:/Users/battina srinuvasurao/OneDrive/Desktop/AdminTicket/TicketingTool/src/components/projects/ProjectView.js"],"sourcesContent":["\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import { useParams, Link } from 'react-router-dom';\r\n// import { getProject, listIssues } from '../../services/mockApi';\r\n\r\n// export default function ProjectView() {\r\n//   const { id } = useParams();\r\n//   const [project, setProject] = useState(null);\r\n//   const [issues, setIssues] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     if (id) {\r\n//       getProject(id).then(setProject);\r\n//       // Fetch only issues belonging to this project\r\n//       listIssues(id).then(setIssues);\r\n//     }\r\n//   }, [id]);\r\n\r\n//   if (!project)\r\n//     return (\r\n//       <div className=\"card\">\r\n//         <p>Project not found</p>\r\n//       </div>\r\n//     );\r\n\r\n//   return (\r\n//     <div className=\"card\" role=\"region\" aria-labelledby=\"proj-title\">\r\n//       <h2 id=\"proj-title\">\r\n//         {project.name} <span className=\"small\">({project.key})</span>\r\n//       </h2>\r\n//       <p>{project.description}</p>\r\n//       <div style={{ display: 'flex', gap: 8 }}>\r\n//         {/* Each project has its own board */}\r\n//         <Link to={`/kanban/${project.id}`} className=\"btn\">\r\n//           Open {project.name} Board\r\n//         </Link>\r\n//       </div>\r\n//       <hr />\r\n//       <h3>Issues</h3>\r\n//       <ul>\r\n//         {issues.length > 0 ? (\r\n//           issues.map((i) => (\r\n//             <li key={i.id}>\r\n//               <Link to={'/issues/' + i.id}>{i.title}</Link> — <em>{i.status}</em>\r\n//             </li>\r\n//           ))\r\n//         ) : (\r\n//           <li>No issues for this project yet.</li>\r\n//         )}\r\n//       </ul>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n////////////////////////////////  for responsivenesss ////////////////////////////// "],"mappings":";;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAgBA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}